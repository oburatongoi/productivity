{
  "_args": [
    [
      {
        "raw": "@ava/pretty-format@^1.1.0",
        "scope": "@ava",
        "escapedName": "@ava%2fpretty-format",
        "name": "@ava/pretty-format",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/sotongo/Code/productivity/vendor/oburatongoi/productivity/node_modules/ava"
    ]
  ],
  "_from": "@ava/pretty-format@>=1.1.0 <2.0.0",
  "_id": "@ava/pretty-format@1.1.0",
  "_inCache": true,
  "_location": "/@ava/pretty-format",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/pretty-format-1.1.0.tgz_1487278081566_0.8773944897111505"
  },
  "_npmUser": {
    "name": "ava",
    "email": "npm@ava.li"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@ava/pretty-format@^1.1.0",
    "scope": "@ava",
    "escapedName": "@ava%2fpretty-format",
    "name": "@ava/pretty-format",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ava"
  ],
  "_resolved": "https://registry.npmjs.org/@ava/pretty-format/-/pretty-format-1.1.0.tgz",
  "_shasum": "d0a57d25eb9aeab9643bdd1a030642b91c123e28",
  "_shrinkwrap": null,
  "_spec": "@ava/pretty-format@^1.1.0",
  "_where": "/Users/sotongo/Code/productivity/vendor/oburatongoi/productivity/node_modules/ava",
  "author": {
    "name": "James Kyle",
    "email": "me@thejameskyle.com"
  },
  "bugs": {
    "url": "https://github.com/avajs/pretty-format/issues"
  },
  "dependencies": {
    "ansi-styles": "^2.2.1",
    "esutils": "^2.0.2"
  },
  "description": "Stringify any JavaScript value",
  "devDependencies": {
    "chalk": "^1.1.3",
    "jest": "^15.1.1",
    "left-pad": "^1.1.1",
    "react": "15.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d0a57d25eb9aeab9643bdd1a030642b91c123e28",
    "tarball": "https://registry.npmjs.org/@ava/pretty-format/-/pretty-format-1.1.0.tgz"
  },
  "gitHead": "2ffd9cdcef03cf63d42ab80bd3c899e875718048",
  "homepage": "https://github.com/avajs/pretty-format#readme",
  "jest": {
    "testEnvironment": "node",
    "verbose": true
  },
  "license": "MIT",
  "maintainers": [
    {
      "name": "ava",
      "email": "npm@ava.li"
    }
  ],
  "name": "@ava/pretty-format",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# @ava/pretty-format [![Travis build status](http://img.shields.io/travis/avajs/pretty-format.svg?style=flat)](https://travis-ci.org/avajs/pretty-format)\n\n> Stringify any JavaScript value.\n\n- Supports [all built-in JavaScript types](#type-support)\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd) (similar performance to v8's `JSON.stringify` and significantly faster than Node's `util.format`)\n- Plugin system for extending with custom types (i.e. [`ReactTestComponent`](#reacttestcomponent-plugin))\n\n\n## Installation\n\n```sh\n$ npm install @ava/pretty-format\n```\n\n## Usage\n\n```js\nvar prettyFormat = require('pretty-format');\n\nvar obj = { property: {} };\nobj.circularReference = obj;\nobj[Symbol('foo')] = 'foo';\nobj.map = new Map();\nobj.map.set('prop', 'value');\nobj.array = [1, NaN, Infinity];\n\nconsole.log(prettyFormat(obj));\n```\n\n**Result:**\n\n```js\nObject {\n  \"property\": Object {},\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\"\n  },\n  \"array\": Array [\n    1,\n    NaN,\n    Infinity\n  ],\n  Symbol(foo): \"foo\"\n}\n```\n\n#### Type Support\n\n`Object`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `arguments`, `Boolean`, `Date`, `Error`, `Function`, `Infinity`, `Map`, `NaN`, `null`, `Number`, `RegExp`, `Set`, `String`, `Symbol`, `undefined`, `WeakMap`, `WeakSet`\n\n### API\n\n```js\nconsole.log(prettyFormat(object));\nconsole.log(prettyFormat(object, options));\n```\n\nOptions:\n\n* **`callToJSON`**<br>\n  Type: `boolean`, default: `true`<br>\n  Call `toJSON()` on passed object.\n* **`indent`**<br>\n  Type: `number`, default: `2`<br>\n  Number of spaces for indentation.\n* **`maxDepth`**<br>\n  Type: `number`, default: `Infinity`<br>\n  Print only this number of levels.\n* **`min`**<br>\n  Type: `boolean`, default: `false`<br>\n  Print without whitespace.\n* **`plugins`**<br>\n  Type: `array`, default: `[]`<br>\n  Plugins (see the next section).\n* **`printFunctionName`**<br>\n  Type: `boolean`, default: `true`<br>\n  Print function names or just `[Function]`.\n* **`escapeRegex`**<br>\n  Type: `boolean`, default: `false`<br>\n  Escape special characters in regular expressions.\n* **`highlight`**<br>\n  Type: `boolean`, default: `false`<br>\n  Highlight syntax for terminal (works only with `ReactTestComponent` and `ReactElement` plugins.\n* **`theme`**<br>\n  Type: `object`, default: `{tag: 'cyan', content: 'reset'...}`<br>\n  Syntax highlight theme.<br>\n  Uses [ansi-styles colors](https://github.com/chalk/ansi-styles#colors) + `reset` for no color.<br>\n  Available types: `tag`, `content`, `prop` and `value`.\n\n### Plugins\n\nPretty format also supports adding plugins:\n\n```js\nvar fooPlugin = {\n  test: function(val) {\n    return val && val.hasOwnProperty('foo');\n  },\n  print: function(val, print, indent) {\n    return 'Foo: ' + print(val.foo);\n  }\n};\n\nvar obj = { foo: { bar: {} } };\n\nprettyFormat(obj, {\n  plugins: [fooPlugin]\n});\n// Foo: Object {\n//   \"bar\": Object {}\n// }\n```\n\n#### `ReactTestComponent` and `ReactElement` plugins\n\n```js\nvar prettyFormat = require('pretty-format');\nvar reactTestPlugin = require('pretty-format/plugins/ReactTestComponent');\nvar reactElementPlugin = require('pretty-format/plugins/ReactElement');\n\nvar React = require('react');\nvar renderer = require('react-test-renderer');\n\nvar jsx = React.createElement('h1', null, 'Hello World');\n\nprettyFormat(renderer.create(jsx).toJSON(), {\n  plugins: [reactTestPlugin, reactElementPlugin]\n});\n// <h1>\n//   Hello World\n// </h1>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/avajs/pretty-format.git"
  },
  "scripts": {
    "perf": "node perf/test.js",
    "test": "jest"
  },
  "version": "1.1.0"
}
