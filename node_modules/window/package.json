{
  "_args": [
    [
      {
        "raw": "window@3.1.5",
        "scope": null,
        "escapedName": "window",
        "name": "window",
        "rawSpec": "3.1.5",
        "spec": "3.1.5",
        "type": "version"
      },
      "/Users/sotongo/Code/productivity/vendor/oburatongoi/productivity/node_modules/browser-env"
    ]
  ],
  "_from": "window@3.1.5",
  "_id": "window@3.1.5",
  "_inCache": true,
  "_location": "/window",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/window-3.1.5.tgz_1491810318636_0.2347247840370983"
  },
  "_npmUser": {
    "name": "lukechilds",
    "email": "lukechilds123@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "window@3.1.5",
    "scope": null,
    "escapedName": "window",
    "name": "window",
    "rawSpec": "3.1.5",
    "spec": "3.1.5",
    "type": "version"
  },
  "_requiredBy": [
    "/browser-env"
  ],
  "_resolved": "https://registry.npmjs.org/window/-/window-3.1.5.tgz",
  "_shasum": "dacd813d54efa5da9647dbc281855f12b89664bb",
  "_shrinkwrap": null,
  "_spec": "window@3.1.5",
  "_where": "/Users/sotongo/Code/productivity/vendor/oburatongoi/productivity/node_modules/browser-env",
  "author": {
    "name": "Luke Childs",
    "email": "lukechilds123@gmail.com",
    "url": "http://lukechilds.co.uk"
  },
  "bugs": {
    "url": "https://github.com/lukechilds/window/issues"
  },
  "dependencies": {
    "jsdom": "9.11.0"
  },
  "description": "Exports a jsdom window object.",
  "devDependencies": {
    "ava": "^0.18.0",
    "coveralls": "^2.11.13",
    "eslint-config-xo-lukechilds": "^1.0.0",
    "nyc": "^10.0.0",
    "xo": "^0.17.1"
  },
  "directories": {},
  "dist": {
    "shasum": "dacd813d54efa5da9647dbc281855f12b89664bb",
    "tarball": "https://registry.npmjs.org/window/-/window-3.1.5.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "f05ba1d3374f0efb2894e827901fdd02dfe87a46",
  "homepage": "https://github.com/lukechilds/window#readme",
  "keywords": [
    "export",
    "jsdom",
    "window",
    "object",
    "simulate",
    "node",
    "browser",
    "environment",
    "env"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "lukechilds",
      "email": "lukechilds123@gmail.com"
    }
  ],
  "name": "window",
  "optionalDependencies": {},
  "readme": "# window\n\n> Exports a [`jsdom`](https://github.com/tmpvar/jsdom) window object.\n\n[![Build Status](https://travis-ci.org/lukechilds/window.svg?branch=master)](https://travis-ci.org/lukechilds/window) [![Coverage Status](https://coveralls.io/repos/github/lukechilds/window/badge.svg?branch=master)](https://coveralls.io/github/lukechilds/window?branch=master) [![npm](https://img.shields.io/npm/dm/window.svg)](https://www.npmjs.com/package/window)\n\nExports a jsdom window object. This is useful for enabling browser modules to run in Node.js or testing browser modules in any Node.js test framework.\n\n## Install\n\n```shell\nnpm install --save window\n```\n\nOr if you're just using for testing you'll probably want:\n\n```shell\nnpm install --save-dev window\n```\n\n## Usage\n\n```js\nconst Window = require('window');\n\nconst window = new Window();\n\nconst div = window.document.createElement('div');\n// HTMLDivElement\n\ndiv instanceof window.HTMLElement\n// true\n```\n\nBecause `window` is just a normal JavaScript object it can be used more efficiently with object destructuring.\n\n```js\nconst { document } = new Window();\n\ndocument.body.innerHTML = '<div class=\"foo\">Hi!</div>';\ndocument.body.querySelector('.foo').textContent;\n// \"Hi!\"\n```\n\n### Config\n\nYou can also pass a jsdom config object that will be passed along to the underlying jsdom instance.\n\n```js\nconst jsdomConfig = { userAgent: 'Custom UA' };\nconst window = new Window(jsdomConfig);\n\nwindow.navigator.userAgent;\n// \"Custom UA\"\n```\n\n## Universal Testing Pattern\n\nYou can use a really simple pattern to enable your browser modules to run in Node.js. Just allow a window object to be passed in to your module and prepend any references to browser globals with `win`. Set `win` to the passed in window object if it exists, otherwise fallback to global `window`.\n\n```js\nmodule.exports = function(text, win) {\n  win = win || window;\n\n  const div = win.document.createElement('div');\n  div.innerHTML = `<h1>${text}</h1>`;\n  return div.querySelector('h1');\n};\n```\n\nBrowser usage:\n\n```js\nmodule('Hi');\n// <h1>Hi</h1>\n```\n\nNode.js usage:\n\n```js\nconst window = new Window();\n\nmodule('Hi', window);\n// <h1>Hi</h1>\n```\n\nObviously you don't need to follow this exact pattern, maybe you already have an options object and you only need `document` not the entire window object:\n\n```js\nmodule.exports = function(text, opts = {}) {\n  const doc = opts.document || window.document;\n\n  const div = doc.createElement('div');\n  ...\n```\n\nYou can see an example of this pattern in my `create-node` module. Specifically [src/create-node.js](https://github.com/lukechilds/create-node/blob/master/src/create-node.js) and  [test/unit.js](https://github.com/lukechilds/create-node/blob/master/test/unit.js).\n\n## What about dependencies?\n\nSometimes you may have dependencies that you can't pass a window object to. In that scenario you can alternatively use [`browser-env`](https://github.com/lukechilds/browser-env) which will simulate a global browser environment.\n\n## License\n\nMIT Â© Luke Childs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lukechilds/window.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "lint": "xo",
    "test": "nyc ava test"
  },
  "version": "3.1.5",
  "xo": {
    "extends": "xo-lukechilds"
  }
}
